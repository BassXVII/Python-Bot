#Get username from mention
       #member1 = message.mentions[0].id

       #print("Extracted Data " + res + " requested By " + str(member1))

       SOng


#@bot.command()
#async def Purge(ctx, * , args):
#      await ctx.channel.purge(limit=args)
#     await ctx.channel.send("Snakey cleared away 30 messages")


#get user id

async def get_userID(user_id): 
   # renamed id to user_id to make it more readable
 global user 
 user= bot.get_user(user_id)
 print(user)
 return (user)



(?=src)src=\"(?P<src>[^\[.*?\]+)

@command.commands()
async def delete(ctx, amount=25):
  await ctx.channel.purge(limit=amount)
  await ctx.channel.send("Snakey deleted 25 previous messages!")



  async def movieQ(ctx, * , movieSearch):
  movieSearched = movieSearch
  movies = ia.search_movie(movieSearched)
  movieResults = str(movies[0])
  await ctx.channel.send(movieResults)
  print(movies)

   for key in book:
	print(key, book[key])



  #not all movies have all scores. You will have to do a for loop to scan every query
  #IMDB_Rating = db['Ratings'][0]['Value']
  #RottenTom_Rating = db['Ratings'][1]['Value']
  #MetaCritic_Rating = db['Ratings'][2]['Value']

  #pp.pprint(('\n'.join("{}: {}".format(k, v) for k, v in db.items())))



@bot.command()
async def Lyrics(ctx, * , songname):
  
  search_term = songname

  genius_search_url = f"http://api.genius.com/search?q={search_term}&access_token={client_access_token}"

  response = requests.get(genius_search_url)
  json_data = response.json()


  
  with open ("Artist_Query.json", "w") as f:
    json.dump ( json_data, f)
  
  
  f = open('Artist_Query.json', 'r')  
  db = json.load(f)
  json_data['response']['hits'][0]
  
  for song in json_data['response']['hits']:
    print(song['result']['full_title'], song['result']['stats'])
  
      
    #KOgmt4ELM3VC7D598oXLBwFVcdNxyP7aihveOI41Cin7wn-Ge_qbeywI0ROSsMRa




    def seperArgs(arg,delimeter):
    finalArgs = []
    toAppend = ''
    index = 0
    for i in arg:
        if(i == delimeter):
            finalArgs.append(toAppend.strip())
            toAppend = ''
        else:
            toAppend += i
        if(index == len(arg) - 1):
            finalArgs.append(toAppend.strip())
            toAppend = ''
        index += 1
    return finalArgs

print(seperArgs('hello my name is -world -land','-'))

#should print: ['hello my name is', 'world', 'land']









    #Artist_bio = re.sub(r"[\'([{})'\]]", "",Artist_bio )
    #num_albums = []
    #Find all albums from artist
    #albums = soup.findAll('h3', class_ = 'artist-album-label')

    #for i in albums[:int_Value]:
    #num_albums[] = str(albums)

    #artist_pic = str(x)
    #with open ("Example.txt", "w") as f:
    #f.write(headstr)
    #f.write(pp1)
    #f.write(soup)






  def lyrics_page(artists, number):
  final_Url =  requests.get("https://www.lyrics.com/artist/" + str(artists) + str(number))
  soup2 = BeautifulSoup(final_Url.content, 'lxml')
  
  with open("Example2.txt", "w") as f:
      f.write(soup2, f)